#!/usr/bin/env node

const program = require('commander');
const path = require('path');
const chalk = require('chalk');
const paths = require('../default-paths');
const webpack = require('webpack');
const merge = require('webpack-merge');
const config = require('../webpack-config-umd');
const package = require(path.resolve('./package.json')); // host package
const fs = require('fs-extra');

program
  .option('-l, --lib', 'bundle library (entry point is index.js and externals are excluded)')
  .option('-a, --app', 'bundle application (entry point is app.js and all dependencies are included)')
  .parse(process.argv);

function shipIndex(type, appName, bundleName) {
  process.stdout.write(chalk.yellow(`---shipping index.html---`, '\n'));
  const indexName = ['index', type ,'html'].join('.');
  const sourcePath = path.join('public', indexName);
  const destPath = path.join('dist', 'index.html');

  try {
    fs.copySync(sourcePath, destPath);
  } catch(err) {
    process.stdout.write(chalk.red('cp', 'unable to ship index.html from ' + sourcePath, '\n'));
    process.stdout.write(chalk.blue('cp', 'fallback to default index', '\n'));
    const data = `<!doctype html>
<html>
  <head>
    <title>${appName}</title>
    <meta charset="utf-8">
  </head>
  <body>
    <div id="root"></div>
    <script src="/${bundleName}"></script>
  </body>
</html>`;
    fs.writeFileSync(destPath, data);
  }

  process.stdout.write(chalk.yellow(`---shipped---`, '\n'));
}

function bundle(type, config, cb) {
  process.stdout.write(chalk.yellow(`---bundling ${type}---`, '\n'));
  webpack(
    config,
    function(err, stats) {
      process.stdout.write(chalk.blue('webpack', paths.src, '->', paths.dist + '/' + config.output.filename, '\n'));
      if (err) process.stdout.write(chalk.red(err.toString(), '\n'));
      stats.hasErrors()
        ? process.stdout.write(chalk.red('fail', '\n'))
        : process.stdout.write(chalk.green('success', '\n'));
      process.stdout.write(chalk.gray(`---log---`, '\n'));
      console.log(stats.toString({ chunks: false, colors: false }));
      process.stdout.write(chalk.yellow(`---bundled ${type}---`, '\n'));
      shipIndex(type, package.name, config.output.filename);
      if (cb) cb();
    }
  );
}

const configs = {
  lib: merge(
    config('lib'),
    { output: { filename: `${package.name}.lib.js` }, externals: package.externals }
  ),
  app: merge(
    config('app'),
    { output: { filename: `${package.name}.app.js` } }
  )
};

// cascading bundles
if (program.lib && program.app) bundle('lib', configs.lib, function() { bundle('app', configs.app); });
else if (program.lib) bundle('lib', configs.lib);
else if (program.app) bundle('app', configs.app);
else process.stdout.write(chalk.yellow(`choose a bundle (see --help for details)`, '\n'));
