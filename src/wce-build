#!/usr/bin/env node

const program = require('commander');
const path = require('path');
const spawn = require('cross-spawn-async');
const chalk = require('chalk');
const fs = require('fs-extra');
const babelConfig = require('../babel-config');
const paths = require('../default-paths');
const _ = require('lodash');

program
  .option('-v, --verbose', 'log built files')
  .parse(process.argv);

const babelCmd = path.join(paths.bin, 'babel');
const babelArgs = [
  paths.src,
  '--out-dir',
  paths.lib,
  '--presets',
  babelConfig.presets.join(','),
  '--plugins',
  _.initial(babelConfig.plugins).join(',')
];

process.stdout.write(chalk.yellow('---build---', '\n'));
process.stdout.write(chalk.blue('babel', babelArgs.join(' '), '\n'));

try {
  fs.copySync(path.join(paths.src, 'assets'), path.join(paths.lib, 'assets'));
} catch(err) {
  process.stdout.write(chalk.red('cp', 'unable to cp assets', '\n'));
}

var babel = spawn(babelCmd, babelArgs);

if (program.verbose) babel.stdout.on('data', data => process.stdout.write(data.toString()));
babel.stderr.on('data', data => process.stdout.write(chalk.red(data.toString(), '\n')));
babel.on('close', code => process.stdout.write(chalk.yellow('---build done---', '\n')));
