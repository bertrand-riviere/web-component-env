#!/usr/bin/env node

const program = require('commander');
const path = require('path');
const childProcess = require('child_process');
const chalk = require('chalk');
const treeKill = require('tree-kill');

const killHelp = () => {
  process.stdout.write(chalk.gray('   kill+[enter] to properly end the process', '\n'));
};

const bye = (error, stdout, stderr) => {
  process.stdout.write(chalk.gray('---goodbye---', '\n'));
  process.exit();
};

program
  .option('-p, --port <n>', 'set the port', parseInt)
  .parse(process.argv);

const nodeCmd = 'node';
const wcePath = path.dirname(__dirname);
const scriptPath = path.join(wcePath, 'dev-server.js');
const nodeArgs = scriptPath;

process.stdout.write(chalk.gray('---starting dev env---', '\n'));
killHelp();
var node = childProcess.exec([nodeCmd, scriptPath].join(' '));

process.stdin.on('readable', () => {
  var chunk = process.stdin.read();
  if (!chunk) return;
  if (chunk.toString() === 'kill\n') {
    kill(node.pid);
  } else {
    process.stdout.write(chalk.yellow('   unknown command: ', chunk));
    killHelp();
  }
})
node.stdout.on('data', data => process.stdout.write(data.toString()));
node.stderr.on('data', data => process.stdout.write(chalk.red(data.toString(), '\n')));

const kill = (pid) => {
  const isWin = /^win/.test(process.platform);
  process.stdout.write(chalk.gray('---killing dev env---', '\n'));
  process.stdout.write(chalk.blue('   pid:', pid, '\n'));
  process.stdout.write(chalk.blue('   platform:', process.platform, '\n'));
  if (isWin) {
    childProcess.exec('taskkill /PID ' + pid + ' /T /F', bye);
  } else {
    treeKill(pid, 'SIGTERM', (err) => {
      if (err) process.stdout.write(chalk.red(err, '\n'));
      bye();
    });
  }
};
