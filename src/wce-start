#!/usr/bin/env node

const program = require('commander');
const path = require('path');
const childProcess = require('child_process');
const chalk = require('chalk');
const treeKill = require('tree-kill');
const spawn = require('cross-spawn');
const paths = require('../default-paths');
const fs = require('fs-extra');

const killHelp = () => {
  process.stdout.write(chalk.gray('   kill+[enter] to properly end the process', '\n'));
};

const bye = (error, stdout, stderr) => {
  process.stdout.write(chalk.gray('---goodbye---', '\n'));
  process.exit();
};

const clean = () => {
  spawn.sync(
    path.join(path.dirname(__dirname), 'src/wce-clean'),
    ['--pattern', paths.build],
    { stdio: 'inherit' }
  );
};

const kill = (pid) => {
  clean();
  const isWin = /^win/.test(process.platform);
  process.stdout.write(chalk.gray('---killing dev env---', '\n'));
  process.stdout.write(chalk.blue('   pid:', pid, '\n'));
  process.stdout.write(chalk.blue('   platform:', process.platform, '\n'));
  if (isWin) {
    childProcess.exec('taskkill /PID ' + pid + ' /T /F', bye);
  } else {
    treeKill(pid, 'SIGTERM', (err) => {
      if (err) process.stdout.write(chalk.red(err, '\n'));
      bye();
    });
  }
};

program
  .option('-h, --host <n>', 'set the host')
  .option('-p, --port <n>', 'set the port', parseInt)
  .parse(process.argv);

process.env.PORT = program.port || 3000;
process.env.HOST = program.host || '0.0.0.0';

const wcePath = path.dirname(__dirname);
const webpackDevServerConfig = path.join(wcePath, 'webpack-config.js');
const webpackDevServerCmd = path.join(paths.bin, 'webpack-dev-server');

process.stdout.write(chalk.gray('---starting dev env---', '\n'));
clean();
fs.copySync(path.join(wcePath, 'index.html'), path.join('build', 'index.html'));

killHelp();
var webpackDevServer = childProcess.exec([
  webpackDevServerCmd,
  '--config', webpackDevServerConfig
].join(' '));

process.stdin.on('readable', () => {
  var chunk = process.stdin.read();
  if (!chunk) return;
  if (chunk.toString() === 'kill\n') {
    kill(webpackDevServer.pid);
  } else {
    process.stdout.write(chalk.yellow('   unknown command: ', chunk));
    killHelp();
  }
})
webpackDevServer.stdout.on('data', data => process.stdout.write(data.toString()));
webpackDevServer.stderr.on('data', data => process.stdout.write(chalk.red(data.toString(), '\n')));
