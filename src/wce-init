#!/usr/bin/env node

const program = require('commander');
const mkdirp = require('mkdirp');
const chalk = require('chalk');
const package = require('../package.json');
const fs = require('fs');

const write = (path, data) => {
  try {
    fs.writeFileSync(path, data, { flag: 'wx' }, 'utf-8');
  } catch (err) {
    process.stdout.write(chalk.yellow('   EEXIST: file already exists', '\n'));
  }
};

program.parse(process.argv);

process.stdout.write(chalk.gray('---initializing---', '\n'));
const folders = [
  'src/actions',
  'src/assets',
  'src/containers',
  'src/reducers',
  'src/utils',
  'src/views',
  'test'
];
process.stdout.write(chalk.blue('   mkdirp', folders.join(' '), '\n'));
folders.forEach(mkdirp.sync);

const gitIgnored = [
  'node_modules',
  'npm-debug.log',
  'build',
  'dist',
  'lib',
  '.nyc_output'
];
process.stdout.write(chalk.blue('   .gitignore', '\n'));
write('.gitignore', gitIgnored.join('\n'));

const npmIgnored = [
  'node_modules',
  'npm-debug.log',
];
process.stdout.write(chalk.blue('   .npmignore', '\n'));
write('.npmignore', npmIgnored.join('\n'));

process.stdout.write(chalk.blue('   README.md', '\n'));
write('README.md', `> generated by ${package.name}@${package.version}`);

process.stdout.write(chalk.blue('   src/app.js', '\n'));
write('src/app.js', '// dev entry point');

process.stdout.write(chalk.blue('   src/index.js', '\n'));
write('src/index.js', '// umd entry point');

process.stdout.write(chalk.gray('---initializing done---', '\n'));
